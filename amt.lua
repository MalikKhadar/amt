-- UI code generated by Lokasenna's GUI Builder

local AMT_PPQ = 50

local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()

GUI.req("Classes/Class - Slider.lua")()
GUI.req("Classes/Class - Options.lua")()
GUI.req("Classes/Class - Button.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end

GUI.name = "AMT"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 134, 267
GUI.anchor, GUI.corner = "mouse", "C"

-- Function to get the take associated with a MIDI item
function GetSelectedMIDITake()
    -- Get the active media item
    local mediaItem = reaper.GetSelectedMediaItem(0, 0)
    if not mediaItem then
        return
    end

    -- Get the active take of the media item
    local activeTake = reaper.GetActiveTake(mediaItem)
    if not activeTake then
        return
    end

    -- Check if the active take is MIDI
    if reaper.TakeIsMIDI(activeTake) == false then
        reaper.ShowConsoleMsg("Selected item is not MIDI\n")
        return
    end

    return activeTake
end

-- Function to get the source associated with a MIDI item
function GetSelectedMIDISource()
    activeTake = GetSelectedMIDITake()
    if not activeTake then
        return
    end

    -- Get the media source of the active take
    local mediaSource = reaper.GetMediaItemTake_Source(activeTake)
    if not mediaSource then
        reaper.ShowConsoleMsg("No media source for the active take.\n")
        return
    end

    return mediaSource
end

-- Get the start time of the selected media item
function getSelectedMediaItemStartTime()
    local selectedItem = reaper.GetSelectedMediaItem(0, 0)
    if selectedItem then
        return reaper.GetMediaItemInfo_Value(selectedItem, "D_POSITION")
    else
        return nil
    end
end

-- Get the start time of the highlighted time selection (loop start)
function getLoopStartTime()
    local loopStart, _ = reaper.GetSet_LoopTimeRange2(0, false, false, 0, 0, false)
    return loopStart
end

-- Get the end time of the highlighted time selection (loop end)
function getLoopEndTime()
    local _, loopEnd = reaper.GetSet_LoopTimeRange2(0, false, false, 0, 0, false)
    return loopEnd
end

-- Augment/create midi file using AMT
function generate_midi()
    local script_path = debug.getinfo(1).source:match("@?(.*[\\|/])")
    local midi_buffer_path = script_path .. '/amt.mid'
    -- If no midi file is selected, augment mode will not be used
    local selected_midi_source = GetSelectedMIDISource()
    local command_params = ""
    local start_time, end_time = reaper.GetSet_LoopTimeRange2(0, false, false, 0, 0, false)

    -- If no loop time range is selected, stop
    if end_time - start_time <= 0 then
        reaper.MB("You must specify a loop time range", "Error", 1)
        return
    end

    -- Set to augment mode: used if a midi file is selected
    if selected_midi_source then 
        -- Write selected midi to the buffer
        reaper.CF_ExportMediaSource(GetSelectedMIDISource(), midi_buffer_path)
        midi_start_time = getSelectedMediaItemStartTime()
        command_params = " -m " .. midi_buffer_path
        
        -- Make start and end times relative to the midi file using ticks
        selected_midi_take = GetSelectedMIDITake()
        start_time = reaper.MIDI_GetPPQPosFromProjTime(selected_midi_take, start_time)
        end_time = reaper.MIDI_GetPPQPosFromProjTime(selected_midi_take, end_time)

        -- AMT expects ppq (specified at top of file) may differ from reaper's, so we need to scale these values
        local position = reaper.GetMediaItemInfo_Value(reaper.GetSelectedMediaItem(0, 0), 'D_POSITION')
        local offset = reaper.GetMediaItemTakeInfo_Value(selected_midi_take, 'D_STARTOFFS')
        local qn = reaper.TimeMap2_timeToQN(nil, position - offset)
        ticksPerQuarterNote = reaper.MIDI_GetPPQPosFromProjQN(selected_midi_take, qn + 1)

        start_time = math.abs(math.floor(start_time / ticksPerQuarterNote * AMT_PPQ))
        end_time = math.abs(math.floor(end_time / ticksPerQuarterNote * AMT_PPQ))

        -- Let AMT know we're using ticks (use_ticks) instead of seconds
        command_params = command_params .. " -u"

        -- Move cursor so new midi will start at same time as old midi
        reaper.SetEditCurPos(midi_start_time, false, false)
    else
        -- When generating new midi, duration will equal loop time range
        end_time = end_time - start_time
        start_time = 0
    end

    -- Determine if using accompany or replace mode
    local mode = GUI.Val("Mode")
    if mode == 1 then
        command_params = command_params .. ' -r'
    end

    -- Determine which model size to use
    local big_mode = GUI.Val("BigMode")
    if big_mode == true then
        command_params = command_params .. ' -b'
    end

    -- Get the p value
    local p = GUI.Val("p")

    -- Prepare flags/args for running amt.py
    command_params = command_params .. ' -p ' .. p
    command_params = command_params .. ' -d ' .. midi_buffer_path
    command_params = command_params .. ' -s ' .. start_time
    command_params = command_params .. ' -e ' .. end_time
    command_params = command_params .. ' -n ' .. script_path .. '/ESM_One_Shot_FX_Notification_UI_Sci_Fi_Control_Board_01_Shuttle_Panel_Indie_Ship_Dm.wav'

    -- Put together final command and run it
    local command_full = script_path .. "myenv\\Scripts\\python.exe " .. script_path .. "\\amt.py"
    command_full = command_full .. " " .. command_params
    os.execute(command_full)
    
    -- Insert the new midi into the project and delete the buffer
    midi = reaper.InsertMedia(midi_buffer_path, 1)
    os.remove(midi_buffer_path)
end

GUI.New("p", "Slider", {
    z = 11,
    x = 16,
    y = 32,
    w = 101,
    caption = "p",
    min = 0.5,
    max = 2,
    defaults = {48},
    inc = 0.01,
    dir = "h",
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    show_handles = true,
    show_values = true,
    cap_x = 0,
    cap_y = 0
})

GUI.New("Mode", "Radio", {
    z = 11,
    x = 16,
    y = 68,
    w = 102,
    h = 56,
    optarray = {"Replace", "Accompany"},
    dir = "v",
    font_a = 2,
    font_b = 3,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    frame = true,
    shadow = true,
    swap = nil,
    opt_size = 20
})

GUI.New("BigMode", "Checklist", {
    z = 11,
    x = 16,
    y = 123,
    w = 102,
    h = 30,
    caption = "",
    optarray = {"Big Mode"},
    dir = "v",
    pad = 4,
    font_a = 2,
    font_b = 3,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    frame = true,
    shadow = true,
    swap = nil,
    opt_size = 20
})

GUI.New("delta", "Slider", {
    z = 11,
    x = 16,
    y = 185,
    w = 101,
    caption = "Delta",
    min = 1,
    max = 20,
    defaults = {40},
    inc = 0.1,
    dir = "h",
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    show_handles = true,
    show_values = true,
    cap_x = 0,
    cap_y = 0
})

GUI.New("new_midi", "Button", {
    z = 11,
    x = 16,
    y = 221,
    w = 100,
    h = 24,
    caption = "Generate",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = generate_midi
})

GUI.Init()
GUI.Main()
